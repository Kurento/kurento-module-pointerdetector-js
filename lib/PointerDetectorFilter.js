/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var checkType = require('checktype');

var ChecktypeError = checkType.ChecktypeError;

var Filter = require('kurento-client').register.abstracts.Filter;

/**
 * Builder for the :rom:cls:`PointerDetector`.
 *
 * @classdesc
 *  This type of {@link module:core/abstracts.Filter Filter} detects UI pointers in a video feed.
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:pointerdetector.PointerDetectorFilter
 *
 * @param {external:String} id
 *
 * @fires {@link module:pointerdetector#event:WindowIn WindowIn}
 * @fires {@link module:pointerdetector#event:WindowOut WindowOut}
 */
function PointerDetectorFilter(id){
  PointerDetectorFilter.super_.call(this, id);
};
inherits(PointerDetectorFilter, Filter);


/**
 *  Adds a new detection window for the filter to detect pointers entering or exiting the window
 *
 * @alias module:pointerdetector.PointerDetectorFilter.addWindow
 *
 * @param {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} window
 *  The window to be added
 *
 * @param {module:pointerdetector.PointerDetectorFilter~addWindowCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.addWindow = function(window, callback){
  checkType('PointerDetectorWindowMediaParam', 'window', window, {required: true});

  var params = {
    window: window,
  };

  return this.invoke('addWindow', params, callback);
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~addWindowCallback
 * @param {external:Error} error
 */

/**
 * Removes all pointer detector windows
 *
 * @alias module:pointerdetector.PointerDetectorFilter.clearWindows
 *
 * @param {module:pointerdetector.PointerDetectorFilter~clearWindowsCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.clearWindows = function(callback){
  return this.invoke('clearWindows', callback);
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~clearWindowsCallback
 * @param {external:Error} error
 */

/**
 * Removes a window from the list to be monitored
 *
 * @alias module:pointerdetector.PointerDetectorFilter.removeWindow
 *
 * @param {external:String} windowId
 *  the id of the window to be removed
 *
 * @param {module:pointerdetector.PointerDetectorFilter~removeWindowCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.removeWindow = function(windowId, callback){
  checkType('String', 'windowId', windowId, {required: true});

  var params = {
    windowId: windowId,
  };

  return this.invoke('removeWindow', params, callback);
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~removeWindowCallback
 * @param {external:Error} error
 */

/**
 * This method allows to calibrate the tracking color.
 * 
 * The new tracking color will be the color of the object in the colorCalibrationRegion.
 *
 * @alias module:pointerdetector.PointerDetectorFilter.trackColorFromCalibrationRegion
 *
 * @param {module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.trackColorFromCalibrationRegion = function(callback){
  return this.invoke('trackColorFromCalibrationRegion', callback);
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback
 * @param {external:Error} error
 */

/**
 * @alias module:pointerdetector.PointerDetectorFilter.constructorParams
 *
 * @property {module:pointerdetector/complexTypes.WindowParam} calibrationRegion
 *  region to calibrate the filter
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter belongs
 *
 * @property {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} [windows]
 *  list of detection windows for the filter.
 */
PointerDetectorFilter.constructorParams = {
  calibrationRegion: {
    type: 'WindowParam',
    required: true
  },

  mediaPipeline: {
    type: 'MediaPipeline',
    required: true
  },

  windows: {
    type: 'PointerDetectorWindowMediaParam',
    isList: true,
  },
};

/**
 * @alias module:pointerdetector.PointerDetectorFilter.events
 *
 * @extend module:core/abstracts.Filter.events
 */
PointerDetectorFilter.events = Filter.events.concat(['WindowIn', 'WindowOut']);

module.exports = PointerDetectorFilter;

PointerDetectorFilter.check = function(key, value)
{
  if(!(value instanceof PointerDetectorFilter))
    throw ChecktypeError(key, PointerDetectorFilter, value);
};
