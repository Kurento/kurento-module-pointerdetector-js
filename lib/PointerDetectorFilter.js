/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var disguise = kurentoClient.disguise;

var checkType      = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;


var Transaction = kurentoClient.TransactionsManager.Transaction;

var Filter = kurentoClient.register.abstracts.Filter;


function noop(error, result) {
  if (error) console.trace(error);

  return result
};


/**
 * Builder for the :rom:cls:`PointerDetector`.
 *
 * @classdesc
 *  This type of {@link module:core/abstracts.Filter Filter} detects UI pointers
 *
 * @extends module:core/abstracts.Filter
 *
 * @constructor module:pointerdetector.PointerDetectorFilter
 *
 * @fires {@link module:pointerdetector#event:WindowIn WindowIn}
 * @fires {@link module:pointerdetector#event:WindowOut WindowOut}
 */
function PointerDetectorFilter(){
  PointerDetectorFilter.super_.call(this);
};
inherits(PointerDetectorFilter, Filter);


//
// Public methods
//

/**
 *  Adds a new detection window for the filter to detect pointers entering or 
 *  exiting the window
 *
 * @alias module:pointerdetector.PointerDetectorFilter.addWindow
 *
 * @param {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} window
 *  The window to be added
 *
 * @param {module:pointerdetector.PointerDetectorFilter~addWindowCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.addWindow = function(window, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  //  
  // checkType('PointerDetectorWindowMediaParam', 'window', window, {required: true});
  //  

  var params = {
    window: window
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'addWindow', params, callback), this)
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~addWindowCallback
 * @param {external:Error} error
 */

/**
 * Removes all pointer detector windows
 *
 * @alias module:pointerdetector.PointerDetectorFilter.clearWindows
 *
 * @param {module:pointerdetector.PointerDetectorFilter~clearWindowsCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.clearWindows = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  var usePromise = false;
  
  if (callback == undefined) {
    usePromise = true;
  }
  
  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'clearWindows', callback), this)
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~clearWindowsCallback
 * @param {external:Error} error
 */

/**
 * Removes a window from the list to be monitored
 *
 * @alias module:pointerdetector.PointerDetectorFilter.removeWindow
 *
 * @param {external:String} windowId
 *  the id of the window to be removed
 *
 * @param {module:pointerdetector.PointerDetectorFilter~removeWindowCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.removeWindow = function(windowId, callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  //  
  // checkType('String', 'windowId', windowId, {required: true});
  //  

  var params = {
    windowId: windowId
  };

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'removeWindow', params, callback), this)
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~removeWindowCallback
 * @param {external:Error} error
 */

/**
 * This method allows to calibrate the tracking color.
 * The new tracking color will be the color of the object in the 
 * colorCalibrationRegion.
 *
 * @alias module:pointerdetector.PointerDetectorFilter.trackColorFromCalibrationRegion
 *
 * @param {module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback} [callback]
 *
 * @return {external:Promise}
 */
PointerDetectorFilter.prototype.trackColorFromCalibrationRegion = function(callback){
  var transaction = (arguments[0] instanceof Transaction)
                  ? Array.prototype.shift.apply(arguments)
                  : undefined;

  var usePromise = false;
  
  if (callback == undefined) {
    usePromise = true;
  }
  
  if(!arguments.length) callback = undefined;

  callback = (callback || noop).bind(this)

  return disguise(this._invoke(transaction, 'trackColorFromCalibrationRegion', callback), this)
};
/**
 * @callback module:pointerdetector.PointerDetectorFilter~trackColorFromCalibrationRegionCallback
 * @param {external:Error} error
 */


/**
 * @alias module:pointerdetector.PointerDetectorFilter.constructorParams
 *
 * @property {module:pointerdetector/complexTypes.WindowParam} calibrationRegion
 *  region to calibrate the filter
 *
 * @property {module:core.MediaPipeline} mediaPipeline
 *  the {@link module:core.MediaPipeline MediaPipeline} to which the filter 
 *  belongs
 *
 * @property {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam}[] [windows]
 *  list of detection windows for the filter.
 */
PointerDetectorFilter.constructorParams = {
  calibrationRegion: {
    type: 'pointerdetector.WindowParam',
    required: true
  },
  mediaPipeline: {
    type: 'kurento.MediaPipeline',
    required: true
  },
  windows: {
    type: 'pointerdetector.PointerDetectorWindowMediaParam',
    isArray: true
  }
};

/**
 * @alias module:pointerdetector.PointerDetectorFilter.events
 *
 * @extends module:core/abstracts.Filter.events
 */
PointerDetectorFilter.events = Filter.events.concat(['WindowIn', 'WindowOut']);


/**
 * Checker for {@link module:pointerdetector.PointerDetectorFilter}
 *
 * @memberof module:pointerdetector
 *
 * @param {external:String} key
 * @param {module:pointerdetector.PointerDetectorFilter} value
 */
function checkPointerDetectorFilter(key, value)
{
  if(!(value instanceof PointerDetectorFilter))
    throw ChecktypeError(key, PointerDetectorFilter, value);
};


module.exports = PointerDetectorFilter;

PointerDetectorFilter.check = checkPointerDetectorFilter;
