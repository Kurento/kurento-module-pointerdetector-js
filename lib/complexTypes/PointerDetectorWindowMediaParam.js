/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2015 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var kurentoClient = require('kurento-client');

var checkType = kurentoClient.checkType;
var ChecktypeError = checkType.ChecktypeError;

var ComplexType = kurentoClient.register.complexTypes.ComplexType;


/**
 * Data structure for UI Pointer detection in video streams.
 * All the coordinates are in pixels. X is horizontal, Y is vertical, running 
 * from the top of the window. Thus, 0,0 corresponds to the topleft corner.
 *
 * @constructor module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam
 *
 * @property {external:String} id
 *  id of the window for pointer detection
 * @property {external:Integer} height
 *  height in pixels
 * @property {external:Integer} width
 *  width in pixels
 * @property {external:Integer} upperRightX
 *  X coordinate in pixels of the upper left corner
 * @property {external:Integer} upperRightY
 *  Y coordinate in pixels of the upper left corner
 * @property {external:String} activeImage
 *  uri of the image to be used when the pointer is inside the window
 * @property {external:Number} imageTransparency
 *  transparency ratio of the image
 * @property {external:String} image
 *  uri of the image to be used for the window.
 *  If {@link 
 *  module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam#activeImage}
 */
function PointerDetectorWindowMediaParam(pointerDetectorWindowMediaParamDict){
  if(!(this instanceof PointerDetectorWindowMediaParam))
    return new PointerDetectorWindowMediaParam(pointerDetectorWindowMediaParamDict)

  // Check pointerDetectorWindowMediaParamDict has the required fields
  checkType('String', 'pointerDetectorWindowMediaParamDict.id', pointerDetectorWindowMediaParamDict.id, true);
  checkType('int', 'pointerDetectorWindowMediaParamDict.height', pointerDetectorWindowMediaParamDict.height, true);
  checkType('int', 'pointerDetectorWindowMediaParamDict.width', pointerDetectorWindowMediaParamDict.width, true);
  checkType('int', 'pointerDetectorWindowMediaParamDict.upperRightX', pointerDetectorWindowMediaParamDict.upperRightX, true);
  checkType('int', 'pointerDetectorWindowMediaParamDict.upperRightY', pointerDetectorWindowMediaParamDict.upperRightY, true);
  checkType('String', 'pointerDetectorWindowMediaParamDict.activeImage', pointerDetectorWindowMediaParamDict.activeImage);
  checkType('float', 'pointerDetectorWindowMediaParamDict.imageTransparency', pointerDetectorWindowMediaParamDict.imageTransparency);
  checkType('String', 'pointerDetectorWindowMediaParamDict.image', pointerDetectorWindowMediaParamDict.image);

  // Init parent class
  PointerDetectorWindowMediaParam.super_.call(this, pointerDetectorWindowMediaParamDict)

  // Set object properties
  Object.defineProperties(this, {
    id: {
      writable: true,
      enumerable: true,
      value: pointerDetectorWindowMediaParamDict.id
    },
    height: {
      writable: true,
      enumerable: true,
      value: pointerDetectorWindowMediaParamDict.height
    },
    width: {
      writable: true,
      enumerable: true,
      value: pointerDetectorWindowMediaParamDict.width
    },
    upperRightX: {
      writable: true,
      enumerable: true,
      value: pointerDetectorWindowMediaParamDict.upperRightX
    },
    upperRightY: {
      writable: true,
      enumerable: true,
      value: pointerDetectorWindowMediaParamDict.upperRightY
    },
    activeImage: {
      writable: true,
      enumerable: true,
      value: pointerDetectorWindowMediaParamDict.activeImage
    },
    imageTransparency: {
      writable: true,
      enumerable: true,
      value: pointerDetectorWindowMediaParamDict.imageTransparency
    },
    image: {
      writable: true,
      enumerable: true,
      value: pointerDetectorWindowMediaParamDict.image
    }
  })
}
inherits(PointerDetectorWindowMediaParam, ComplexType)

// Private identifiers to allow re-construction of the complexType on the server
// They need to be enumerable so JSON.stringify() can access to them
Object.defineProperties(PointerDetectorWindowMediaParam.prototype, {
  __module__: {
    enumerable: true,
    value: "pointerdetector"
  },
  __type__: {
    enumerable: true,
    value: "PointerDetectorWindowMediaParam"
  }
})

/**
 * Checker for {@link pointerdetector/complexTypes.PointerDetectorWindowMediaParam}
 *
 * @memberof module:pointerdetector/complexTypes
 *
 * @param {external:String} key
 * @param {module:pointerdetector/complexTypes.PointerDetectorWindowMediaParam} value
 */
function checkPointerDetectorWindowMediaParam(key, value)
{
  if(!(value instanceof PointerDetectorWindowMediaParam))
    throw ChecktypeError(key, PointerDetectorWindowMediaParam, value);
};


module.exports = PointerDetectorWindowMediaParam;

PointerDetectorWindowMediaParam.check = checkPointerDetectorWindowMediaParam;
